# ============================================================
# 智投简历 - 生产环境自动部署工作流
# 触发条件: push 到 main 分支 或 手动触发
# 功能: 构建前端 -> 上传到服务器 -> 配置 Nginx -> 健康检查
# ============================================================

name: Deploy to Production

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: "部署环境"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-deploy:
    name: 构建并部署到生产环境
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ============================================================
      # 1. 检出代码
      # ============================================================
      - name: 📦 检出代码
        uses: actions/checkout@v4

      # ============================================================
      # 2. 设置 Node.js 环境
      # ============================================================
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # ============================================================
      # 3. 安装依赖
      # ============================================================
      - name: 📦 安装依赖
        run: |
          echo "开始安装依赖..."
          npm ci
          echo "依赖安装完成"

      # ============================================================
      # 4. 运行代码质量检查
      # ============================================================
      - name: 🔍 代码质量检查
        run: |
          echo "运行代码质量检查..."
          npm run lint || echo "⚠️ Lint 检查有警告，继续部署"
          npm run type-check || echo "⚠️ 类型检查有警告，继续部署"

      # ============================================================
      # 5. 构建前端项目
      # ============================================================
      - name: 🔨 构建前端
        env:
          # 生产环境变量配置
          VITE_API_BASE_URL: https://zhitoujianli.com
          NODE_ENV: production
        run: |
          echo "开始构建前端..."
          npm run build:frontend
          echo "前端构建完成"
          ls -lah frontend/dist/

      # ============================================================
      # 6. 准备部署包（仅上传必要文件）
      # ============================================================
      - name: 📦 准备部署包
        run: |
          echo "准备部署包..."
          mkdir -p deploy_package
          cp -r frontend/dist deploy_package/
          echo "部署包准备完成"

      # ============================================================
      # 7. 上传前端构建产物到服务器
      # ============================================================
      - name: 🚀 上传前端到服务器
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: deploy_package/dist/
          remote_path: ${{ secrets.REMOTE_DEPLOY_DIR }}/releases/dist_${{ github.run_number }}/
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_port: ${{ secrets.SSH_PORT }}
          remote_key: ${{ secrets.SSH_KEY }}

      # ============================================================
      # 8. 上传 Nginx 配置文件
      # ============================================================
      - name: 📤 上传 Nginx 配置
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/nginx/zhitoujianli.conf"
          target: "/tmp/"
          strip_components: 2

      # ============================================================
      # 9. 远程部署执行
      # ============================================================
      - name: 🎯 执行远程部署
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            # 定义变量
            CURRENT_DIR="${{ secrets.REMOTE_DEPLOY_DIR }}"
            RELEASES_DIR="$CURRENT_DIR/releases"
            NEW_DIST="$RELEASES_DIR/dist_${{ github.run_number }}"
            LIVE_DIST="$CURRENT_DIR/dist"
            NGINX_CONF_DEST="${{ secrets.REMOTE_NGINX_CONF }}"
            BACKUP_LINK="$CURRENT_DIR/dist_backup"

            echo "============================================================"
            echo "开始部署流程..."
            echo "部署版本: ${{ github.run_number }}"
            echo "提交 SHA: ${{ github.sha }}"
            echo "============================================================"

            # 确保目录存在
            echo "📁 创建必要目录..."
            sudo mkdir -p "$RELEASES_DIR"
            sudo mkdir -p "$(dirname "$NGINX_CONF_DEST")"
            sudo mkdir -p /var/www/letsencrypt

            # 备份当前版本
            if [ -L "$LIVE_DIST" ]; then
              echo "💾 备份当前版本..."
              sudo rm -f "$BACKUP_LINK"
              sudo cp -P "$LIVE_DIST" "$BACKUP_LINK"
            fi

            # 更新 Nginx 配置
            echo "🔧 更新 Nginx 配置..."
            sudo cp /tmp/zhitoujianli.conf "$NGINX_CONF_DEST"
            sudo chown root:root "$NGINX_CONF_DEST"
            sudo chmod 644 "$NGINX_CONF_DEST"

            # 测试 Nginx 配置
            echo "🧪 测试 Nginx 配置..."
            if ! sudo nginx -t; then
              echo "❌ Nginx 配置测试失败，回滚配置"
              if [ -f "$NGINX_CONF_DEST.backup" ]; then
                sudo cp "$NGINX_CONF_DEST.backup" "$NGINX_CONF_DEST"
              fi
              exit 1
            fi

            # 备份旧配置（成功后）
            sudo cp "$NGINX_CONF_DEST" "$NGINX_CONF_DEST.backup"

            # 重载 Nginx
            echo "♻️ 重载 Nginx..."
            sudo systemctl reload nginx
            echo "✅ Nginx 重载成功"

            # 切换软链接
            echo "🔗 切换到新版本..."
            if [ -d "$NEW_DIST" ]; then
              sudo rm -rf "$LIVE_DIST"
              sudo ln -s "$NEW_DIST" "$LIVE_DIST"
              echo "✅ 版本切换成功: $LIVE_DIST -> $NEW_DIST"
            else
              echo "❌ 新版本目录不存在: $NEW_DIST"
              exit 1
            fi

            # 等待服务稳定
            echo "⏳ 等待服务稳定..."
            sleep 3

            # 健康检查
            echo "🩺 执行健康检查..."

            # 检查主页
            if curl -fsSL -m 10 https://www.zhitoujianli.com/ > /dev/null; then
              echo "✅ 主页检查通过"
            else
              echo "❌ 主页检查失败"
              exit 1
            fi

            # 检查注册页
            if curl -fsSL -m 10 https://www.zhitoujianli.com/register > /dev/null; then
              echo "✅ 注册页检查通过"
            else
              echo "❌ 注册页检查失败"
              exit 1
            fi

            # 检查 API（预期可能返回 401/405，但应该有响应）
            API_STATUS=$(curl -sL -w "%{http_code}" -o /dev/null -m 10 https://zhitoujianli.com/api/auth/send-verification-code || echo "000")
            if [ "$API_STATUS" != "000" ]; then
              echo "✅ API 端点响应正常 (状态码: $API_STATUS)"
            else
              echo "⚠️ API 端点无响应，但继续部署"
            fi

            # 清理旧版本（保留最近 3 个）
            echo "🧹 清理旧版本..."
            cd "$RELEASES_DIR"
            ls -1dt dist_* | tail -n +4 | xargs -r sudo rm -rf
            echo "✅ 清理完成"

            echo "============================================================"
            echo "🎉 部署成功完成！"
            echo "访问地址: https://www.zhitoujianli.com"
            echo "============================================================"

      # ============================================================
      # 10. 回滚处理（如果部署失败）
      # ============================================================
      - name: 🔄 部署失败回滚
        if: failure()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "⚠️ 检测到部署失败，尝试回滚..."

            CURRENT_DIR="${{ secrets.REMOTE_DEPLOY_DIR }}"
            LIVE_DIST="$CURRENT_DIR/dist"
            BACKUP_LINK="$CURRENT_DIR/dist_backup"

            if [ -L "$BACKUP_LINK" ]; then
              sudo rm -f "$LIVE_DIST"
              sudo cp -P "$BACKUP_LINK" "$LIVE_DIST"
              echo "✅ 已回滚到之前的版本"
            else
              echo "⚠️ 没有找到备份版本"
            fi

      # ============================================================
      # 11. 生成部署报告
      # ============================================================
      - name: 📊 生成部署报告
        if: always()
        run: |
          echo "## 🚀 部署报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **环境**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **提交**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **触发者**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ 部署成功" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [访问网站](https://www.zhitoujianli.com)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 部署失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "请检查日志并修复问题" >> $GITHUB_STEP_SUMMARY
          fi

      # ============================================================
      # 12. 发送通知（可选，需要配置 Webhook）
      # ============================================================
      # - name: 📢 发送部署通知
      #   if: always()
      #   run: |
      #     # 这里可以添加通知逻辑，例如：
      #     # - 企业微信/钉钉 Webhook
      #     # - Slack 通知
      #     # - 邮件通知
      #     echo "部署通知功能待配置"
